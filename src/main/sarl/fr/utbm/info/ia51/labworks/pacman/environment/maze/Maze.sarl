/* 
 * $Id$
 * 
 * Copyright (c) 2015-17 Stephane GALLAND.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labworks.pacman.environment.maze

import fr.utbm.info.ia51.framework.math.Point2i
import java.lang.reflect.Array
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.List
import java.util.Random
import java.util.TreeMap
import java.util.UUID

/**
 * Define the maze.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class Maze {

	/** Max number of super pills in the world.
	 */
	static val MAX_SUPER_PILLS = 5

	/** Matrix of the objects.
	 */
	val grid : PacmanObject[][] 

	val bodies = new TreeMap<UUID, AgentBody>

	/** Width of the world.
	 */
	val width : int 

	/** Height of the world.
	 */
	val height : int 

	/** Random generator.
	 */
	val random = new Random

	/**
	 * @param width is the width of the world.
	 * @param height is the height of the world.
	 */
	new (width : int, height : int) {
		this.width = width
		this.height = height
		this.grid = Array::newInstance(PacmanObject, width, height) as PacmanObject[][]

		buildWorld(this.width, this.height);
	}

	/** Build the maze and fill the spaces with pills.
	 * 
	 * @param width width of the maze.
	 * @param height height of the maze.
	 */
	private def buildWorld(width : int, height : int) : void {
		//buildMaze_recursiveAlgorithm(0, width, 0, height);
		buildMaze

		for (var i = 0; i < width; i++) {
			for (var j = 0; j < height; j++) {
				if (this.grid.get(i).get(j) === null) {
					this.grid.get(i).set(j, new PillObject(i, j, this, false))
				}
			}
		}

		for (var i = 0; i < MAX_SUPER_PILLS; i++) {
			var x = this.random.nextInt(width)
			var y = this.random.nextInt(height)
			while (!canMoveInside(x, y)) {
				x = this.random.nextInt(width)
				y = this.random.nextInt(height)
			}
			this.grid.get(x).set(y, new PillObject(x, y, this, true))
		}
	}

	/** Build the maze with the Prim's algorithm.
	 */
	private def buildMaze : void {
		// Fill the maze with walls.
		for (var i = 0; i < this.width; i++) {
			for (var j = 0; j < this.height; j++) {
				this.grid.get(i).set(j, new WallObject(i, j, this))
			}
		}
		
		// Declare the list of walls from which it could be possible to dig.
		var walls = new ArrayList<PrimWall>
		
		// Select a random cell and prepare to dig.
		var x = this.random.nextInt(this.width)
		var y = this.random.nextInt(this.height)
		this.grid.get(x).set(y, null)
		walls.add(new PrimWall(x, y - 1, x, y - 2, x - 1, y - 2, x, y - 3, x + 1, y - 2))
		walls.add(new PrimWall(x, y + 1, x, y + 2, x - 1, y + 2, x, y + 3, x + 1, y + 2))
		walls.add(new PrimWall(x - 1, y, x - 2,  y, x - 2, y + 1, x - 3, y, x - 2, y - 1))
		walls.add(new PrimWall(x + 1, y, x + 2, y, x + 2, y - 1, x + 3, y, x + 2, y + 1))
		
		// Loop 'til no more place for digging
		while (!walls.empty) {
			// Select a wall to dig inside
			var diggeableWall = walls.remove(this.random.nextInt(walls.size))
			// Check if the wall could be digged
			if (diggeableWall.corridor.x >= 0 && diggeableWall.corridor.x < this.width
				&& diggeableWall.corridor.y >= 0 && diggeableWall.corridor.y < this.height
				&& this.grid.get(diggeableWall.corridor.x).get(diggeableWall.corridor.y) instanceof WallObject
				&& this.grid.get(diggeableWall.passage.x).get(diggeableWall.passage.y) instanceof WallObject) {
				// Dig the walls
				this.grid.get(diggeableWall.passage.x).set(diggeableWall.passage.y, null)
				this.grid.get(diggeableWall.corridor.x).set(diggeableWall.corridor.y, null)
				// Add the candidates
				addWallCandidate(walls, diggeableWall.corridor, diggeableWall.passageCandidate1)
				addWallCandidate(walls, diggeableWall.corridor, diggeableWall.passageCandidate2)
				addWallCandidate(walls, diggeableWall.corridor, diggeableWall.passageCandidate3)
			}
		}
	}
	
	private def addWallCandidate(walls : List<PrimWall>, corridor : Point2i, candidate : Point2i) : void {
		val v = candidate - corridor

		val r = v.clone
		r.perpendicularize
		
		var pw = new PrimWall(
				// new passage
				corridor.x + v.x,
				corridor.y + v.y,
				// new corridor
				corridor.x + 2 * v.x,
				corridor.y + 2 * v.y,
				// new candidate 1
				corridor.x + 3 * v.x,
				corridor.y + 3 * v.y,
				// new candidate 2
				corridor.x + 2 * v.x + r.x,
				corridor.y + 2 * v.y + r.y,
				// new candidate 3
				corridor.x + 2 * v.x - r.x,
				corridor.y + 2 * v.y - r.y)
		
		walls += pw
	}

	/** Replies if the cell at the given coordinates can receive a body.
	 * 
	 * @param x
	 * @param y
	 * @return <code>true</code> if the cell is empty or has a pickable object; <code>false</code>
	 * otherwise.
	 */
	@Pure
	synchronized def canMoveInside(x : int, y : int) : boolean {
		x >= 0 && y >= 0 && x < this.width && y < this.height
		&& (this.grid.get(x).get(y) === null || this.grid.get(x).get(y).pickable)
	}

	/** Create a body of the given type.
	 *
	 * @param bodyType the type of the body.
	 * @param agentId the identifier of the agent that will be linked to the body.
	 * @param perceptionDistance the distance of perception.
	 * @return the body.
	 * @throws Exception if it is impossible to retrieve the body constructor or to create the instance. 
	 */
	def createBody(bodyType : Class<T>, agentId : UUID, perceptionDistance : int) : T with T extends AgentBody {
		var x = this.random.nextInt(width)
		var y = this.random.nextInt(height)
		while (!canMoveInside(x, y)) {
			x = this.random.nextInt(width)
			y = this.random.nextInt(height)
		}

		var id = agentId
		if (id === null) {
			id = UUID::randomUUID
		}

		var cons = bodyType.getDeclaredConstructor(typeof(int), typeof(int), typeof(Maze), typeof(UUID), typeof(int))
		var body = cons.newInstance(x, y, this, id, perceptionDistance)

		this.grid.get(x).set(y, body)
		this.bodies.put(id, body)

		return body
	}

	/** Replies the number of bodies in the maze.
	 * 
	 * @return the number of bodies.
	 */
	@Pure
	def getBodyCount : int {
		this.bodies.size
	}

	/** Replies the object at the given position.
	 * 
	 * @param x
	 * @param y
	 * @return the object or <code>null</code>.
	 */
	@Pure
	def getObjectAt(x : int, y : int) : PacmanObject {
		if (x >= 0 && x < this.width && y >= 0 && y < this.height) {
			return this.grid.get(x).get(y)
		}
		return new WallObject(x, y, this)
	}

	/** Set the object at the given position.
	 * 
	 * @param x
	 * @param y
	 * @param obj the object to put at the position
	 * @return the object in the cell before the change.
	 */
	def setObjectAt(x : int, y : int, obj : PacmanObject) : PacmanObject {
		if (x >= 0 && x < this.width && y >= 0 && y < this.height) {
			var old = this.grid.get(x).get(y)
			this.grid.get(x).set(y, obj)
			if (obj !== null) {
				obj.setPosition(x, y)
			}
			return old
		}
		return null
	}

	/** Set the object at the given position.
	 * 
	 * @param position
	 * @param obj the object to put at the position
	 * @return the object in the cell before the change.
	 */
	def setObjectAt(position : Point2i, obj : PacmanObject) : PacmanObject {
		setObjectAt(position.x, position.y, obj)
	}

	/** Replies the agent bodies.
	 *
	 * @return the agent bodies.
	 */
	def getAgentBodies : Collection<AgentBody> {
		Collections.unmodifiableMap(this.bodies).values
	}

	/** Replies the agent body.
	 *
	 * @param id
	 * @return the body.
	 */
	@Pure
	def getAgentBody(id : UUID) : AgentBody {
		this.bodies.get(id)
	}
	
	/** Replies the accessors for managing the super power of Pacman.
	 * 
	 * @param id the id of Pacman.
	 * @return the accessor.
	 */
	def getSuperPowerAccessorFor(id : UUID) : SuperPowerAccessor {
		var body = this.bodies.get(id)
		if (body instanceof PacmanBody) {
			val pacman : PacmanBody = body
			return new SuperPowerAccessor() {
				def resetSuperPower {
					pacman.resetSuperPower
				}
				def decreaseSuperPower {
					pacman.decreaseSuperPower
				}
			}
		}
		return new SuperPowerAccessor
	}

	/**
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class PrimWall {

		public val passage : Point2i
		public val corridor : Point2i
		public val passageCandidate1 : Point2i
		public val passageCandidate2 : Point2i
		public val passageCandidate3 : Point2i
		
		new (passageX : int, passageY : int, corridorX : int, corridorY : int,
				passageCandidateX1 : int, passageCandidateY1 : int,
				passageCandidateX2 : int, passageCandidateY2 : int,
				passageCandidateX3 : int, passageCandidateY3 : int) {
			this.passage = new Point2i(passageX, passageY)
			this.corridor = new Point2i(corridorX, corridorY)
			this.passageCandidate1 = new Point2i(passageCandidateX1, passageCandidateY1)
			this.passageCandidate2 = new Point2i(passageCandidateX2, passageCandidateY2)
			this.passageCandidate3 = new Point2i(passageCandidateX3, passageCandidateY3)
		}
		
		def toString : String {
			"passage=" + this.passage + "|corridor=" + this.corridor
		}
		
	}

}
