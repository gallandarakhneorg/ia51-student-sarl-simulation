/* 
 * $Id$
 * 
 * Copyright (c) 2015-17 Stephane GALLAND.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labworks.pacman.environment.^agent

import fr.utbm.info.ia51.framework.math.Point2i
import fr.utbm.info.ia51.labworks.pacman.environment.maze.PacmanObject
import fr.utbm.info.ia51.labworks.pacman.players.Ghost
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.Collections
import java.util.TreeMap
import java.util.logging.Logger

/** Definition of the agent that is managing the environment.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent Environment {

	uses MazeManager, MazeFrontEnd, DefaultContextInteractions, Lifecycle
	
	var listeners = <EnvironmentListener>newArrayList
	var player : Player
	var controller : Controller
	var time = 0
	val actions = <MazeChangeQuery>newLinkedList

	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		var nbGhosts = occurrence.parameters.get(2) as Integer
		var perceptionDistance = occurrence.parameters.get(3) as Integer
		for (i : 4..<occurrence.parameters.size) {
			var o = occurrence.parameters.get(i)
			if (o instanceof EnvironmentListener) {
				this.listeners += o
			}
		}
		setSkill(new DefaultMazeManagerSkill(width, height))
		setSkill(new DefaultMazeFrontEndSkill())
		this.controller = new Controller(defaultSpace, defaultAddress)
		var pacmanBody = createPacman
		this.player = new Player(pacmanBody.agentId, Logger::getLogger(ID.toString))
		for (i : 0..<nbGhosts) {
			var ghostBody = createGhost(perceptionDistance)
			spawnInContextWithID(typeof(Ghost), ghostBody.agentId, defaultContext)
		}
		firePlayerBinding
		fireControllerBinding
		fireEnvironmentChange
	}
	
	def fireEnvironmentChange {
		var objects = new TreeMap<Point2i, PacmanObject>
		for (obj : getPacmanObjects) {
			objects.put(obj.position, obj)
		}
		var ^event = new EnvironmentEvent(ID, this.time, mazeWidth, mazeHeight, Collections::unmodifiableMap(objects))
		for (listener : this.listeners) {
			listener.environmentChanged(^event)
		}
	}
	
	def firePlayerBinding {
		for (listener : this.listeners) {
			listener.bindPlayer(this.player)
		}
	}

	def firePlayerUnbinding {
		for (listener : this.listeners) {
			listener.unbindPlayer(this.player)
		}
	}

	def fireControllerBinding {
		for (listener : this.listeners) {
			listener.bindController(this.controller)
		}
	}

	def fireControllerUnbinding {
		for (listener : this.listeners) {
			listener.unbindController(this.controller)
		}
	}

	def fireGameOver {
		for (listener : this.listeners) {
			listener.gameOver()
		}
	}

	on Destroy {
		firePlayerUnbinding
		fireControllerUnbinding;
		clearSkill(typeof(MazeManager));
		clearSkill(typeof(MazeFrontEnd))
	}
	
	on Action [occurrence.time >= time] {
		synchronized(this) {
			this.actions += new MazeChangeQuery(occurrence.source.UUID, occurrence.direction)
			
			if (this.actions.size >= bodyCount - 1) {
				emit(new RunEndOfStep) [it == defaultAddress]
			}
		}
	}
	
	on RunEndOfStep {
		synchronized(this) {
			// Endogenous behavior: move the pacman from the player's action
			var avatarDirection = this.player.direction
			var avatarAction = new MazeChangeQuery(this.player.bodyId, avatarDirection)
			this.actions += avatarAction

			// Endogenous behavior: decrease the super power of Pacman
			getSuperPowerAccessor(this.player.bodyId).decreaseSuperPower

			// Change the state of the universe
			if (applyActions(this.actions)) {
				// Pacman is dead.
				emit(new PacManIsDead)
				fireGameOver
				killMe
			}
			
			// Increase time
			this.time++
			
			// Notify about environment's changes
			fireEnvironmentChange
			
			// Move to next step
			emit(new RunBeginingOfStep)
		}
	}
	
	on RunBeginingOfStep {
		synchronized(this) {
			this.actions.clear
			
			for (e : getPerceptions().entrySet) {
				sendPerception(this.time, e.key.agentId, e.value, e.key.position)
			}
		}
	}
	
}