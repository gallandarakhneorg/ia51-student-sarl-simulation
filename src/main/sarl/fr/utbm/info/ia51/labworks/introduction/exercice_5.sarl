package fr.utbm.info.ia51.labworks.introduction

import io.sarl.core.AgentSpawned
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.lang.core.Address
import io.sarl.lang.core.Scope
import java.util.UUID
import java.util.concurrent.atomic.AtomicInteger

event Hello

agent Agent1_version1 {
	uses Logging, Lifecycle, DefaultContextInteractions

	var spawnedReceived = new AtomicInteger(0)
	
	on Initialize {
		loggingName = "Agent-1"
		info("I'm starting")
		// Compute the ID of Agent2 and spawn Agent2 with this ID
		this.agent2Identifier = UUID::randomUUID
		typeof(Agent2).spawnInContextWithID(this.agent2Identifier, defaultContext)
		typeof(Agent3).spawn
	}

	var agent2Identifier : UUID

	on AgentSpawned {
		var v = spawnedReceived.incrementAndGet
		if (v == 2) {
			emit(new Hello,
				// 2nd argument is the scoping function: which select the receiver of the event.
				new Scope<Address> {
					def matches(it : Address) : boolean {
						return it.UUID == Agent1_version1.this.agent2Identifier
					}
				})
			killMe
		}
	}

}

agent Agent1_version2 {
	uses Logging, Lifecycle, DefaultContextInteractions

	var spawnedReceived = new AtomicInteger(0)
	var agent2Identifier : UUID

	on Initialize {
		loggingName = "Agent-1"
		info("I'm starting")
		// Compute the ID of Agent2 and spawn Agent2 with this ID
		this.agent2Identifier = UUID::randomUUID
		typeof(Agent2).spawnInContextWithID(this.agent2Identifier, defaultContext)
		typeof(Agent3).spawn
	}

	on AgentSpawned {
		var v = spawnedReceived.incrementAndGet
		if (v == 2) {
			emit(new Hello, [
				it.UUID == this.agent2Identifier
			])
			killMe
		}
	}

}

agent Agent1_version3 {
	uses Logging, Lifecycle, DefaultContextInteractions

	var spawnedReceived = new AtomicInteger(0)
	var agent2Identifier : UUID

	on Initialize {
		loggingName = "Agent-1"
		info("I'm starting")
		// Compute the ID of Agent2 and spawn Agent2 with this ID
		this.agent2Identifier = UUID::randomUUID
		typeof(Agent2).spawnInContextWithID(this.agent2Identifier, defaultContext)
		typeof(Agent3).spawn
	}

	on AgentSpawned {
		var v = spawnedReceived.incrementAndGet
		if (v == 2) {
			emit(new Hello) [it.UUID == this.agent2Identifier]
			killMe
		}
	}

}


agent Agent2 {
	uses Logging, Lifecycle

	on Initialize {
		loggingName = "Agent-2"
		info("I'm starting")
	}

	on Hello {
		// occurrence : is the instance of the received event. Here, it is of type "Hello".
		info("An agent said \"hello\" to me: " + occurrence)
		killMe
	}
}

agent Agent3 {
	uses Logging, Lifecycle

	on Initialize {
		loggingName = "Agent-3"
		info("I'm starting")
	}

	on Hello {
		// occurrence : is the instance of the received event. Here, it is of type "Hello".
		info("An agent said \"hello\" to me: " + occurrence)
		killMe
	}
}
