/* 
 * $Id$
 * 
 * Copyright (c) 2014-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labworks.extendedspatialtree.^agent

import fr.utbm.info.ia51.framework.^agent.AbstractAnimat
import fr.utbm.info.ia51.framework.environment.DynamicType
import fr.utbm.info.ia51.framework.environment.PerceptionEvent
import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.general.influence.TypeChangeInfluence
import fr.utbm.info.ia51.general.motionalgo.FleeAlgorithm
import fr.utbm.info.ia51.general.motionalgo.KinematicFleeAlgorithm
import fr.utbm.info.ia51.general.motionalgo.KinematicSeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.KinematicWanderAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SteeringFleeAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SteeringSeekAlgorithm
import fr.utbm.info.ia51.general.motionalgo.SteeringWanderAlgorithm
import fr.utbm.info.ia51.general.motionalgo.WanderAlgorithm
import io.sarl.api.core.Initialize

agent Rabbit extends AbstractAnimat {
	
	var seekBehaviour : SeekAlgorithm
	var fleeBehaviour : FleeAlgorithm
	var wanderBehaviour : WanderAlgorithm
	
	val STOP_RADIUS = MathUtil.PI/10f
	val SLOW_RADIUS = MathUtil.PI/4f
	val WANDER_CIRCLE_DISTANCE = 20f
	val WANDER_CIRCLE_RADIUS = 10f
	val WANDER_MAX_ROTATION = MathUtil.PI / 4f

	// This function is called from "on Initialize" in the super type.
	override overridableInitializationStage(it : Initialize) {
		super.overridableInitializationStage(it)
		if (this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekAlgorithm
			this.fleeBehaviour = new SteeringFleeAlgorithm
			this.wanderBehaviour = new SteeringWanderAlgorithm(
					WANDER_CIRCLE_DISTANCE, 
					WANDER_CIRCLE_RADIUS, 
					WANDER_MAX_ROTATION,
					STOP_RADIUS,
					SLOW_RADIUS)
		}
		else {
			this.seekBehaviour = new KinematicSeekAlgorithm
			this.fleeBehaviour = new KinematicFleeAlgorithm
			this.wanderBehaviour = new KinematicWanderAlgorithm
		} 
	}
		
	on PerceptionEvent {
		var target = occurrence.perceptions.first
		
		if (target === null) {
			emitInfluence(
				this.wanderBehaviour.run(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
				),
				new TypeChangeInfluence("BODY")
			)
		} else if (target.type == "TARGET") {
			emitInfluence(
				this.seekBehaviour.run(
					occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinear,
					target.position
				),
				new TypeChangeInfluence("RAVENOUS")
			)
		} else {
			emitInfluence(
				this.fleeBehaviour.run(
					occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinear,
					target.position
				),
				new TypeChangeInfluence("SCARED")
			)
		}
	}

}