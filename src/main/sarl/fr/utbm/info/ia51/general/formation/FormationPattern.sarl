/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.general.formation

import java.util.ArrayList
import java.util.Collections
import java.util.List

import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Vector2f

/** A formation composed of connected anchors.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class FormationPattern {

	var leaderAnchor : FormationAnchor 
	val anchors : List<FormationAnchor> 

	val globalPosition = new Point2f
	val globalOrientation = new Vector2f(1,0)
	
	/**
	 */
	new {
		this.leaderAnchor = null
		this.anchors = new ArrayList
	}
		
	/** Clear the formation body.
	 */
	protected def clear {
		clearBuffers
		this.leaderAnchor = null
		this.anchors.clear
	}

	/** Clear the buffers.
	 */
	protected def clearBuffers {
		for (anchor : this.anchors) {
			anchor.clear
		}		
	}

	package def addAnchor(anchor : FormationAnchor) {
		this.anchors += anchor
		anchor.clear
		if (this.anchors.size == 1) {
			this.leaderAnchor = anchor
		}
	}

	/** Replies the leader anchor if one is defined.
	 * 
	 * @return the leader anchor or {@code null}.
	 */
	def getLeaderAnchor : FormationAnchor {
		this.leaderAnchor
	}
	
	/** Replies the anchors in the formation body.
	 * 
	 * @return the anchors in the formation body.
	 */
	def getAnchors : List<FormationAnchor> {
		Collections::unmodifiableList(this.anchors)
	}
	
	/** Replies the anchor at the given index.
	 * 
	 * @param index
	 * @return the anchor at the given index.
	 */
	def getAnchorAt(index : int) : FormationAnchor {
		this.anchors.get(index)
	}
	
	/** Change the global position and orientation of the formation.
	 * 
	 * @param position
	 * @param direction
	 */
	def setFormationLocation(position : Point2f, direction : Vector2f) {
		if (position !== null || direction !== null) {
			if (position !== null) {
				this.globalPosition.set(position)
			}
			if (direction !== null) {
				this.globalOrientation.set(direction)
			}
			clearBuffers
		}
	}

	/** Replies the global position of the formation, ie of the leader.
	 * 
	 * @return the global position of the leader.
	 */
	def getGlobalPosition : Point2f {
		this.globalPosition.clone
	}

	/** Replies the global orientation of the formation, ie of the leader.
	 * 
	 * @return the global orientation of the leader.
	 */
	def getGlobalOrientation : Vector2f {
		this.globalOrientation.clone
	}

	/** Replies the global orientation of the formation, ie of the leader.
	 * 
	 * @return the global orientation of the leader.
	 */
	def getGlobalAngle : float {
		this.globalOrientation.orientationAngle
	}

}
