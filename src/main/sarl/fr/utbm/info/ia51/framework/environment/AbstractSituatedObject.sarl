/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import java.io.Serializable
import java.util.UUID

import com.google.common.base.Objects

import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Shape2f
import java.text.MessageFormat

/**
 * Abstract implementation of an object on the environment.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractSituatedObject implements SituatedObject, Serializable {

	val id : UUID 
	var position = new Point2f
	var shape : Shape2f<?> 
	var name : String 
	var type : Serializable 
	
	/**
	 * @param id the identifier of the object.
	 * @param shape the shape of the body, considering that it is centered at the (0,0) position.
	 * @param position is the position of the object.
	 */
	new (id : UUID, shape : Shape2f<?>, position : Point2f = null) {
		assert id !== null
		this.id = id
		this.shape = shape
		if (position !== null) {
			this.position.set(position)
		}
	}
	/** 
	 * @param id the identifier of the object.
	 * @param shape the shape of the body, considering that it is centered at the (0,0) position.
	 * @param x is the position of the object.
	 * @param y is the position of the object.
	 */
	new (id : UUID, shape : Shape2f<?>, x : float, y : float) {
		assert id !== null
		this.id = id
		this.shape = shape
		this.position.set(x, y)
	}

	override clone : AbstractSituatedObject {
		var clone = super.clone as AbstractSituatedObject
		clone.position = this.position.clone
		clone.shape = this.shape.clone
		return clone
	}
	
	override equals(obj : Object) : boolean {
		if (obj === this) {
			return true;
		}
		if (obj instanceof SituatedObject) {
			return obj.ID == ID
		}
		return false
	}
	
	override hashCode : int {
		Objects.hashCode(ID)
	}
	
	override compareTo(o : SituatedObject) : int {
		if (o === null) Integer::MAX_VALUE else ID <=> o.ID
	}
	
	override getType : Serializable {
		this.type
	}
	
	override getID : UUID {
		this.id
	}
	
	/** Set the type of the object.
	 * 
	 * @param type
	 */
	def setType(type : Serializable) {
		this.type = type
	}

	override getName : String {
		this.name
	}
	
	/** Change the name of the object.
	 *
	 * The name is defined only for displaying purpose.
	 * 
	 * @return the name of the object.
	 */
	def setName(name : String) {
		this.name = name
	}
	
	def getShape : Shape2f<?> {
		this.shape.translate(this.position)
	}

	override getPosition : Point2f {
		this.position.clone
	}
	
	override getX : float {
		this.position.x
	}

	override getY : float {
		this.position.y
	}

	/**
	 * Set the position of the object.
	 * 
	 * @param x
	 * @param y
	 */
	protected def setPosition(x : float, y : float) : void {
		if (Double::isNaN(x) || Double::isNaN(y)) {
			System::err.println(
				MessageFormat::format("**** INVALID POSITION (NaN); object with name '{0}'.", this.name))
		} else {
			this.position.set(x, y)
		}
	}
	/** 
	 * Set the position of the object.
	 * 
	 * @param position
	 */
	protected def setPosition(position : Point2f) : void {
		if (Double::isNaN(position.x) || Double::isNaN(position.y)) {
			System::err.println(
				MessageFormat::format("**** INVALID POSITION (NaN); object with name '{0}'.", this.name))
		} else {
			this.position.set(position)
		}
	}

	/** 
	 * Move the position of the object.
	 * 
	 * @param x
	 * @param y
	 */
	protected def addPosition(x : float, y : float) : void {
		if (Double::isNaN(x) || Double::isNaN(y)) {
			System::err.println(
				MessageFormat::format("**** INVALID POSITION (NaN); object with name '{0}'.", this.name))
		} else {
			this.position.add(x, y)
		}
	}

	override toString : String {
		name ?: super.toString
	}

}