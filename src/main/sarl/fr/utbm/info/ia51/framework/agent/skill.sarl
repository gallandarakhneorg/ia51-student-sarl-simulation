/* 
 * $Id$
 * 
 * Copyright (c) 2014-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.^agent

import fr.utbm.info.ia51.framework.environment.DynamicType
import fr.utbm.info.ia51.framework.environment.Influence
import fr.utbm.info.ia51.framework.environment.InfluenceEvent
import fr.utbm.info.ia51.framework.environment.KillInfluence
import fr.utbm.info.ia51.framework.environment.MotionInfluence
import fr.utbm.info.ia51.framework.math.Vector2f
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Address
import java.lang.reflect.Array
import java.util.UUID
import io.sarl.core.OpenEventSpace

skill StandardPhysicEnvironment implements PhysicEnvironment {

	uses DefaultContextInteractions, Behaviors

	val spaceID : UUID
	val environmentID : UUID
	var physicSpace : OpenEventSpace
	var myAdr : Address
	
	new (spaceID : UUID, environmentID : UUID) {
		this.environmentID = environmentID
		this.spaceID = spaceID
	}

	def install {
		do {
			this.physicSpace = defaultContext.getSpace(this.spaceID)
			Thread::yield
		} while (this.physicSpace === null)
		this.physicSpace.register(asEventListener)
		this.myAdr = this.physicSpace.getAddress(owner.ID)
	}
	
	def uninstall() {
		var ^event = new InfluenceEvent(new KillInfluence)
		this.physicSpace.emit(this.myAdr.UUID, ^event) [it.UUID == this.environmentID]
		this.physicSpace = null
	}
	
	def influenceKinematic(linearInfluence : Vector2f = null, angularInfluence : float = 0f, otherInfluences : Influence*) {
		var mi : MotionInfluence
		if (linearInfluence === null) {
			mi = new MotionInfluence(DynamicType::KINEMATIC, angularInfluence)
		} else {
			mi = new MotionInfluence(DynamicType::KINEMATIC, linearInfluence, angularInfluence)
		}
		emitInfluences(mi, otherInfluences)
	}
	
	def influenceSteering(linearInfluence : Vector2f = null, angularInfluence : float = 0f, otherInfluences : Influence*) {
		var mi : MotionInfluence
		if (linearInfluence === null) {
			mi = new MotionInfluence(DynamicType::STEERING, angularInfluence)
		} else {
			mi = new MotionInfluence(DynamicType::STEERING, linearInfluence, angularInfluence)
		}
		emitInfluences(mi, otherInfluences)
	}
	
	def emitInfluences(motionInfluence : MotionInfluence, otherInfluences : Influence*) {
		var influences : Influence[]
		if (otherInfluences.isEmpty) {
			influences = Array::newInstance(typeof(Influence), 1) as Influence[]
			influences.set(0, motionInfluence)
		} else {
			influences = Array::newInstance(typeof(Influence), otherInfluences.length + 1) as Influence[]
			influences.set(0, motionInfluence)
			System::arraycopy(otherInfluences, 0, influences, 1, otherInfluences.length)
		}
		var ^event = new InfluenceEvent(influences)
		this.physicSpace.emit(this.myAdr.UUID, ^event) [it.UUID == this.environmentID]
	}
	
}