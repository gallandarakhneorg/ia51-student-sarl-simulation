/** 
 * 
 */
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.core.Lifecycle
import java.util.UUID
import io.sarl.core.DefaultContextInteractions

/** 
 * @author sgalland
 * 
 */
agent HelloWorldAgent {

	uses Logging, Lifecycle

	on Initialize {
		info("Hello World")
		killMe
	}



	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Bye bye")
	}


	uses DefaultContextInteractions

	on Initialize {
		val id1 = UUID::randomUUID
		val id2 = UUID::randomUUID
		val id3 = UUID::randomUUID
		
		spawnInContextWithID(typeof(Agent1), id1, defaultContext)
		typeof(Agent2).spawnInContextWithID(id2, defaultContext)
		typeof(Agent2).spawnInContextWithID(id3, defaultContext)
		
		emit[new Hello] [it.ID == id3]
	}







	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
		info("I'm killed")
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
